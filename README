** Mesochronic Analysis Toolbox ** 


This is a Matlab toolbox intented to demonstrate the principles behind
2d mesochronic analyses for incompressible dynamical systems.

I would appreciate your feedback sent to
mbudisic@engr.ucsb.edu 

Additionally, if you happen to publish results based on mesochronic
analysis using this code, please send me and 
Igor Mezic mezic@engineering.ucsb.edu
an e-mail with a reference.

Written by 
Marko Budisic, 
Dept. of Mechanical Engineering, UC Santa Barbara
supported by ONR MURI N00014-11-1-0087

** Installation: **

The code compiles itself correctly upon the first run in serial (non-parallel) Matlab. So this step can be skipped if code is always to be run in serial mode.

To run in parallel, in the folder containing mcjacobian.prj first run:
   deploytool -build mcjacobian.prj % wait until "Build finished." is output
which will compile matlab code into C, improving the speed of computation.

** Test (demo) system **
This is a simple planar, time-dependent flow, 
used as the first example in Mezic, Loire, et al. Science (2010)

Demo: fourgyre.m

% open parallel jobs (in serial, the code takes a few minutes to run)
matlabpool open; % 

% computes mesochronic analysis
% and store results in mcan_fourgyre_ode_fwdT_1.5_N_00900.mat
N = 30; % grid resolution
Ts = [0.5, 1, 1.5]; % three different integration times
direction = 1; % positive time arrow direction
R = fourgyre([], Ts, N, direction)

% visualize output for T=1
fourgyre(R, 1, N, direction) 


The demonstration is a sample short-time run, just to evaluate that the code runs validly and to familiarize the user with inputs and output. An end-user 
would (at first) 
a) replace the vector field in fourgyre.m
b) build a function similar to  meh_simulation.m and replace 
   evaluations of instantaneous Jacobian with externally generated data,
   either from more complicated simulations or experiments.

*** File functionality ***

* Main files *

  meh_simulation.m -- Harness: this is the main file that performs
  simulation and analysis of an arbitrary system specified as
  a function handle. 
  For more serious adaptation of the code, e.g., for analyzing 
  experimentally derived data, one should follow the
  analysis in meh_simulation, and develop a similar structure.

  meh2d.m -- Takes a mesochronic Jacobian and computes quantifiers and
  classification for 2d flows

* Computational aides *

  evaluateJ_ode.m -- Evaluates the mesochronic Jacobian at a given
  state point and time of a flow specified by a function handle.

  mcjacobian.m -- Computes a mesochronic Jacobian from evaluations of
  			      instantaneous Jacobian along trajectory
  				  (run by evaluateJ_ode.m)

  ftle.m -- Computes FTLE from mesochronic Jacobian (run by
  meh2d).

  jacobian_fd.m -- Computes instantaneous Jacobiaian using central
  difference method on a vector field.

  matpolys.m -- Computes characteristic and minimal polynomials of a
  matrix.

  mindist.m -- Computes the smallest difference of elements of a
  vector.

* Visualization aides *

  mehcolor.m -- Creates a colormap for visualization of 2d mesochronic
  classes using values of determinant.

  diverging_map.m -- Creates a diverging colormap between 2
  					 colors. Written by Andy Stein based on Kenneth
  					 Moreland (Sandia) paper:
  					 http://www.sandia.gov/~kmorel/documents/ColorMaps/
  					 doi:10.1007/978-3-642-10520-3_9

* Additional files *

  mcjacobian.prj -- Matlab Coder Project file, used to compile
  				    mcjacobian.m into a fast compiled code.

Copyright (c) 2013, Regents of the University of California All rights
reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.  Redistributions
in binary form must reproduce the above copyright notice, this list of
conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.  Neither the name of
the University of California, Santa Barbara nor the names of its
contributors may be used to endorse or promote products derived from
this software without specific prior written permission.  THIS
SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

